- hosts: '{{ target }}'
  become: true
  gather_facts: false

  # Ansible requires python2, which is not installed by default on Ubuntu Xenial
  pre_tasks:
    - name: Install python for Ansible
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
      changed_when: False
    - setup: # aka gather_facts
  tasks:
    - name: update apt-get
      apt:
        update-cache: yes

    - name: remove python-pip
      command: apt-get remove python-pip -y
      ignore_errors: yes

    - name: install pip
      apt: name=python-pip update_cache=yes

    - name: upgrade pip
      command: pip install --upgrade pip

    - name: Add docker apt repo
      apt_repository:
          repo='deb https://apt.dockerproject.org/repo ubuntu-{{ ansible_distribution_release }} main'
          state=present

    - name: Import the Docker repository key
      apt_key:
          url=https://apt.dockerproject.org/gpg
          state=present
          id=2C52609D

    - name: Install Docker
      apt:
          name=docker-engine
          update_cache=yes

    - name: install docker-compose
      command: pip install docker-compose --upgrade
        
    - name: create docker group
      command: groupadd docker
      ignore_errors: yes

    - name: add current user to the new docker group
      command: usermod -aG docker $USER

    - name: restart docker service
      command: service docker restart
  
    - name: increase virtual memory to avoid elastic problems when run on a small machine
      command: sysctl -w vm.max_map_count=262144

    - name: read the docker.service file
      shell: cat /lib/systemd/system/docker.service
      register: docker_service_content

    - name: enable docker to listen on tcp by modifying the docker.service file (only if it was not modified)
      when: docker_service_content.stdout.find('tcp://0.0.0.0:2375') == -1
      replace: 
        dest: /lib/systemd/system/docker.service
        replace: ' fd:// -H tcp://0.0.0.0:2375'
        regexp: '(\s+)fd:\/\/'

    - name: flush changes
      command: systemctl daemon-reload

    - name: restart docker service
      command: systemctl restart docker

    - name: pull the hubserver image
      docker_image:
        name: 3blades/hubserver:latest
        state: present
        force: "{{ force_pull_images }}"
        timeout: 3600 
    - name: pull the openresty image (the on-premise version)
      docker_image:
        name: 3blades/openresty:on-premise
        state: present
        force: "{{ force_pull_images }}"
    - name: pull the notifications-server image
      docker_image:
        name: 3blades/notifications-server:latest
        state: present
        force: "{{ force_pull_images }}"
    - name: pull the logspout image
      docker_image:
        name: 3blades/logspout:latest
        state: present
        force: "{{ force_pull_images }}"
    - name: pull the docker-stats image
      docker_image:
        name: 3blades/docker-stats:latest
        state: present
        force: "{{ force_pull_images }}"

    - name: pull jupyterlab image
      docker_image:
        name: 3blades/jupyterlab:latest
        state: present
        force: "{{ force_pull_images }}"

    - name: pull scipy-notebook image
      docker_image:
        name: 3blades/scipy-notebook:latest
        state: present
        force: "{{ force_pull_images }}"
    
    - name: pull job-py3 image
      docker_image:
        name: 3blades/job-py3:latest
        state: present
        force: "{{ force_pull_images }}"
    - name: pull model-py3 image
      docker_image:
        name: 3blades/model-py3:latest
        state: present
        force: "{{ force_pull_images }}"
    - name: pull mongo image
      docker_image:
        name: mongo
        state: present
        
    - name: pull cassandra image
      docker_image:
        name: cassandra
        state: present
    - name: pull mysql image
      docker_image:
        name: mysql
        state: present
    - name: pull postgres image
      docker_image:
        name: postgres
        state: present        

    - name: create a directory
      file: path=3blades/deployment state=directory

    - name: copy the docker-compose file to host
      copy: dest=3blades/deployment/docker-compose.yml  force=yes src=env-files/docker-compose.yml 

    - name: copy the env-vars file to host
      copy: dest=3blades/deployment/env  force=yes src=env-files/env

    # Gather IP facts from ipify.org
    - name: get my public IP
      ipify_facts:
    
    - set_fact: local_ip="{{hostvars[inventory_hostname]['ansible_default_ipv4']['address']}}"

    - lineinfile: dest=3blades/deployment/env line="SMTP_SERVER={{smtp_server}}"
    - lineinfile: dest=3blades/deployment/env line="MAIL_PORT={{smtp_port}}"

    - lineinfile: dest=3blades/deployment/env line="SMTP_USERNAME={{smtp_username}}"

    - lineinfile: dest=3blades/deployment/env line="SMTP_PASSWORD={{smtp_password}}"
    
    - lineinfile: dest=3blades/deployment/env line="DOCKER_HOST=tcp://{{local_ip}}:2375"

    - lineinfile: dest=3blades/deployment/env line="SERVER_NAME={{ipify_public_ip}}"

    - lineinfile: dest=3blades/deployment/env line="SECRET_KEY={{app_secret_key}}"

    - debug: var=local_ip

    - name: create data volume container
      docker_container: 
        name: postgresql-data
        image: busybox
        volumes:
          - /var/lib/postgresql/data
        state: present

    # launch the full stack in background (-d)
    - name: launch the full-stack
      command: docker-compose -f 3blades/deployment/docker-compose.yml up -d

    - name: "Wait for services to start"
      pause: seconds=25

    - name: "Check the status of hubserver UI"
      command: curl localhost
      register: curl_result

    - name: "Ensure that proper data is present in stdout"
      assert:
        that:
          - "'3Blades-logo.png' in curl_result.stdout"
    # create the env-types by default
    - name: create jupyterlab env-type
      docker_container:
        name: env-type-lab
        image: postgres
        networks:
          - name: deployment_threeblades
            links: 
              - deployment_db_1:3blades_db
        
        cleanup: yes
        command: psql -c "INSERT INTO public.environment_type (name, image_name, cmd, description, work_dir, container_path, container_port, created_at, type)
          VALUES ('JupyterLab', '3blades/jupyterlab', '/serve -db=\"postgresql://postgres:@{{local_ip}}:5432/postgres?sslmode=disable\" -redis=\"redis://{{local_ip}}:6379/0\" -hashid=\"{workspace.hashid}\" -port=8888 -resource=\"/home/work\" jupyter lab --no-browser --NotebookApp.base_url=\"/container/{workspace.hashid}\"', 'JupyterLab (beta)', '/home/work', '/home/work', 8888, now(), 'w');"
         -h 3blades_db -U postgres
    - name: create model-py3 env-type
      docker_container:
        name: env-type-model
        image: postgres
        networks:
          - name: deployment_threeblades
            links: 
              - deployment_db_1:3blades_db
        
        cleanup: yes
        command: psql -c "INSERT INTO public.environment_type (name, image_name, cmd, description, work_dir, container_path, container_port, created_at, type)
          VALUES ('model-py3', '3blades/model-py3', '/server -db=\"postgresql://postgres:@{{local_ip}}:5432/postgres?sslmode=disable\" -redis=\"redis://{{local_ip}}:6379/0\" -hashid=\"{workspace.hashid}\" -hubserver_secret_key="{{app_secret_key}}"', 'Python 3', '/resources', '/resources', 8000, now(), 'm');"
         -h 3blades_db -U postgres
    
    - name: create jobs-py3 env-type
      docker_container:
        name: env-type-jobs
        image: postgres
        networks:
          - name: deployment_threeblades
            links: 
              - deployment_db_1:3blades_db
        
        cleanup: yes
        command: psql -c "INSERT INTO public.environment_type (name, image_name, cmd, description, work_dir, container_path, container_port, created_at, type)
          VALUES ('jobs-py3', '3blades/job-py3', '/server -db=\"postgresql://postgres:@{{local_ip}}:5432/postgres?sslmode=disable\" -redis=\"redis://{{local_ip}}:6379/0\" -resource=\"/resources\" -hashid={job.hashid} python3 -c \"from {job.script:.{script_name_len}} import {job.method}; {job.method}()\"' , 'Python 3', '/resources', '/resources', 8000, now(), 'j');"
         -h 3blades_db -U postgres

    - name: create scipy-notebook env-type
      docker_container:
        name: env-type-scipy
        image: postgres
        networks:
          - name: deployment_threeblades
            links: 
              - deployment_db_1:3blades_db
        
        cleanup: yes
        command: psql -c "INSERT INTO public.environment_type (name, image_name, cmd, description, work_dir, container_path, container_port, created_at, type)
          VALUES ('scipy', '3blades/scipy-notebook', '/serve -db=\"postgresql://postgres:@{{local_ip}}:5432/postgres?sslmode=disable\" -redis=\"redis://{{local_ip}}:6379/0\" -resource=\"/resources\" -hashid={job.hashid} -port=8888 -resource=\"/home/work\" jupyter notebook --no-browser --NotebookApp.base_url=\"/container/{workspace.hashid}\"' , 'Python Data Science Notebook with Jupyter', '/resources', '/resources', 8000, now(),'w');"
         -h 3blades_db -U postgres

    - name: create a resources item with 512 of memory
      docker_container:
        name: env-resources
        image: postgres
        networks:
          - name: deployment_threeblades
            links: 
              - deployment_db_1:3blades_db
        
        cleanup: yes
        command: psql -c "INSERT INTO public.environment_resources (name, cpu, memory, description, created_at, active)
          VALUES ('Small', 1024, 512, '1 CPU with 512 Mb of RAM', now(), true);"
         -h 3blades_db -U postgres

    - name: create a resources item with 1024 of memory
      docker_container:
        name: env-resources
        image: postgres
        networks:
          - name: deployment_threeblades
            links: 
              - deployment_db_1:3blades_db
        
        cleanup: yes
        command: psql -c "INSERT INTO public.environment_resources (name, cpu, memory, description, created_at, active)
          VALUES ('Medium', 1024, 1024, '1 CPU with 1024 Mb of RAM', now(), true);"
         -h 3blades_db -U postgres
    # insert the data-sources in the env-types table
    - name: create cassandra
      docker_container:
        name: env-type
        image: postgres
        networks:
          - name: deployment_threeblades
            links: 
              - deployment_db_1:3blades_db
        
        cleanup: yes
        command: psql -c "INSERT INTO public.environment_type (name, image_name, cmd, description, work_dir, container_path, container_port, created_at, type)
          VALUES ('cassandra', 'cassandra', '' , 'Cassandra', '', '/var/lib/cassandra', 9042, now(),'d');"
         -h 3blades_db -U postgres
    - name: create MongoDB
      docker_container:
        name: env-type
        image: postgres
        networks:
          - name: deployment_threeblades
            links: 
              - deployment_db_1:3blades_db
        
        cleanup: yes
        command: psql -c "INSERT INTO public.environment_type (name, image_name, cmd, description, work_dir, container_path, container_port, created_at,type)
          VALUES ('mongo', 'mongo', '' , 'MongoDB', '', '/data/db', 27017, now(),'d');"
         -h 3blades_db -U postgres
    - name: create mysql env-type
      docker_container:
        name: env-type
        image: postgres
        networks:
          - name: deployment_threeblades
            links: 
              - deployment_db_1:3blades_db
        
        cleanup: yes
        command: psql -c "INSERT INTO public.environment_type (name, image_name, cmd, description, work_dir, container_path, container_port, created_at,type, env_vars)
          VALUES ('mysql', 'mysql', '' , 'MySQL', '', '/var/lib/mysql', 3306, now(),'d', 'MYSQL_ALLOW_EMPTY_PASSWORD => yes');"
         -h 3blades_db -U postgres
    - name: create postgres
      docker_container:
        name: env-type
        image: postgres
        networks:
          - name: deployment_threeblades
            links: 
              - deployment_db_1:3blades_db
        
        cleanup: yes
        command: psql -c "INSERT INTO public.environment_type (name, image_name, cmd, description, work_dir, container_path, container_port, created_at,type)
          VALUES ('postgres', 'postgres', '' , 'PostgreSQL', '', '/var/lib/postgresql/data', 5432, now(),'d');"
         -h 3blades_db -U postgres